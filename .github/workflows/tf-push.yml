name: 'Terraform'

on:
    push:
        branches:
            # - test
            - dev

env:
    AWS_REGION: us-east-1 # preferred AWS region, e.g. us-west-1
    ECR_REPOSITORY: graphql-api # Amazon ECR repository name

jobs:
    build-image:
        runs-on: ubuntu-latest
        outputs:
            image_tag: ${{ steps.build-image.outputs.image_tag }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1-node16
              with:
                  aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build a docker container and
                  # push it to ECR so that it can
                  # be deployed to ECS.
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./docker/api/Dockerfile .
                  docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
                  echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    terraform-apply:
        name: 'Apply'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: terraform
        needs: build-image
        permissions: write-all
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Get branch information
              id: get-branch-info
              uses: tj-actions/branch-names@v6

            - name: Set TF_WORKSPACE variable (Push)
              if: github.event_name == 'push'
              run: echo "TF_WORKSPACE=${{ steps.get-branch-info.outputs.current_branch }}" >> $GITHUB_ENV

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

            - name: Terraform Format
              id: fmt
              run: terraform fmt -check

            - name: Terraform Init
              id: init
              run: terraform init

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan Status
              if: steps.plan.outcome == 'failure'
              run: exit 1

            - name: Terraform Apply
              run: terraform apply -auto-approve -input=false -var="image_tag=${{ needs.build-image.outputs.image_tag }}" -var="environment=${{ env.TF_WORKSPACE }}"
