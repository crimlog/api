input SpectaQLOption {
	key: String!
	value: String!
}
directive @spectaql(
	options: [SpectaQLOption]
) on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"The unique identifier for the student's NFC card"
scalar CardId @spectaql(options: [{ key: "example", value: "20:63:87:62:01:02" }])
"Time (in milliseconds) since the UNIX Epoch"
scalar Timestamp

"A university student"
type Student {
	"University-specific student ID number"
	id: ID! @spectaql(options: [{ key: "example", value: "20638761" }])
	"Student's NFC Card uid"
	cardId: CardId!
	"First name"
	first: String! @spectaql(options: [{ key: "example", value: "John" }])
	"Last name"
	last: String! @spectaql(options: [{ key: "example", value: "Doe" }])
	"Wallet address"
	walletAddress: String! @spectaql(options: [{ key: "example", value: "0x1234567890abcdef" }])
}

"A university professor"
type Professor {
	"University-specific professor ID number"
	id: ID! @spectaql(options: [{ key: "example", value: "20638762" }])
	"First name"
	first: String! @spectaql(options: [{ key: "example", value: "James" }])
	"Last name"
	last: String! @spectaql(options: [{ key: "example", value: "Jameson" }])
}

"A specific university course"
type Course {
	"Database ID of the course"
	id: ID!
	"The course code"
	code: String! @spectaql(options: [{ key: "example", value: "CST-451" }])
	"The course name"
	name: String! @spectaql(options: [{ key: "example", value: "Senior Project I" }])
	"The course professor"
	professor: Professor!
	"All students currently enrolled in the course"
	students: [Student!]!
	"All students enrolled in the course for honors credit"
	honorsStudents: [Student!]!
}

"Represents the blockchain transaction of a student attendance record"
type AttendanceRecord {
	id: ID!
	student: Student!
	professor: Professor!
	course: Course!
	timestamp: Timestamp!
	imageURL: String!
}

"Statuses that an [`AttendanceQueue`]({{Types.AttendanceQueue}}) can be in"
enum AttendanceQueueStatus {
	"Queue is active and able to accept students"
	ACTIVE
	"Queue minting is in progress"
	MINTING
	"Queue minting is complete and the queue is now closed"
	COMPLETE
	"Queue was manually closed without minting"
	CLOSED
	"Queue has been deemed invalid by an administrator"
	INVALID
}

"A digital queue that contains [`Students`]({{Types.Student}}). Batch operations can be performed on the queue, such as minting [`AttendanceRecords`]({{Types.AttendanceRecord}}) for all students in the queue."
type AttendanceQueue {
	"Unique ID of the queue"
	id: ID!
	status: AttendanceQueueStatus!
	"A list of [`Students`]({{Types.Student}}) currently in the queue"
	students: [Student!]!
	"The course the attendance queue is for"
	course: Course!
	"Creation date of the queue"
	timestamp: Timestamp!
}

"Input necessary for creating a new [`AttendanceQueue`]({{Types.AttendanceQueue}})"
input AttendanceQueueInput {
	"[`Professor.id`]({{Types.Professor}})"
	professor: ID!
	"[`Course.id`]({{Types.Course}})"
	course: ID!
}

type Query {
	"Retrieve a single [`Student`]({{Types.Student}}) by ID"
	student("ID of the [`Student`]({{Types.Student}}) to retrieve" id: Int!): Student
	"Retrieve all [`Students`]({{Types.Student}})"
	students: [Student]!
	"Retrieve a single [`Professor`]({{Types.Professor}}) by ID"
	professor("ID of the [`Professor`]({{Types.Professor}}) to retrieve" id: Int!): Professor
	"Retrieve all [`Professors`]({{Types.Professor}})"
	professors: [Professor]!
	"Retrieve a single [`Course`]({{Types.Course}}) by ID"
	course("ID of the [`Course`]({{Types.Course}}) to retrieve" id: Int!): Course
	"Retrieve all [`Courses`]({{Types.Course}})"
	courses: [Course]!
	"Retrieve a single [`AttendanceRecord`]({{Types.AttendanceRecord}}) by ID"
	attendanceRecord(
		"ID of the [`AttendanceRecord`]({{Types.AttendanceRecord}}) to retrieve"
		id: Int!
	): AttendanceRecord
	"Retrieve all [`AttendanceRecords`]({{Types.AttendanceRecord}})"
	attendanceRecords: [AttendanceRecord]!
	"Retrieve a single [`AttendanceQueue`]({{Types.AttendanceQueue}}) by ID"
	attendanceQueue(
		"ID of the [`AttendanceQueue`]({{Types.AttendanceQueue}}) to retrieve"
		id: Int!
	): AttendanceQueue
	"Retrieve all [`AttendanceQueues`]({{Types.AttendanceQueue}})"
	attendanceQueues: [AttendanceQueue]!

	"Retrieve a single [`Student`]({{Types.Student}}) by their [`CardId`]({{Types.CardId}})"
	studentByCardId(
		"[`CardId`]({{Types.CardId}}) of the [`Student`]({{Types.Student}}) to retrieve"
		cardId: CardId!
	): Student
}

type Mutation {
	"The created [`AttendanceQueue`]({{Types.AttendanceQueue}})'s will be automatically set to `ACTIVE`"
	attendanceQueueCreate(
		"Input necessary for creating a new [`AttendanceQueue`]({{Types.AttendanceQueue}})"
		attendanceQueue: AttendanceQueueInput!
	): AttendanceQueue
	"Add a [`Student`]({{Types.Student}}) to an existing [`AttendanceQueue`]({{Types.AttendanceQueue}})"
	attendanceQueueAddStudent(
		"ID of the [`AttendanceQueue`]({{Types.AttendanceQueue}}) to add the student to"
		queueId: ID!
		"ID of the [`Student`]({{Types.Student}}) to add to the queue"
		studentId: ID!
	): AttendanceQueue
	"Remove a [`Student`]({{Types.Student}}) from an existing [`AttendanceQueue`]({{Types.AttendanceQueue}})"
	attendanceQueueRemoveStudent(
		"ID of the [`AttendanceQueue`]({{Types.AttendanceQueue}}) to remove the student from"
		queueId: ID!
		"ID of the [`Student`]({{Types.Student}}) to remove from the queue"
		studentId: ID!
	): AttendanceQueue
	"Manually close an [`AttendanceQueue`]({{Types.AttendanceQueue}})"
	attendanceQueueClose(
		"ID of the [`AttendanceQueue`]({{Types.AttendanceQueue}}) to close"
		queueId: ID!
	): AttendanceQueue
	"Mint an [`AttendanceRecord`]({{Types.AttendanceRecord}}) for all [`Students`]({{Types.Student}}) in an [`AttendanceQueue`]({{Types.AttendanceQueue}}), automatically closing the queue afterewards"
	attendanceQueueMint(
		"ID of the [`AttendanceQueue`]({{Types.AttendanceQueue}}) to issue a minting for"
		queueId: ID!
	): [AttendanceRecord]
}
